<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.SongMapper">
    <insert id="insert" parameterType="Song">
        insert into song
        (name, introduction, pic, lyric, url, create_time, update_time, singer_id)
        values(#{name}, #{introduction}, #{pic}, #{lyric}, #{url}, #{createTime}, #{updateTime}, #{singer.id})
    </insert>

    <insert id="insertSelective" parameterType="Song">
        insert into song
        <trim prefix="(" suffixOverrides="," suffix=")">
            <if test="name != null">
                name,
            </if>
            <if test="introduction != null">
                introduction,
            </if>
            <if test="pic!=null">
                pic,
            </if>
            <if test="lyric!=null">
                lyric,
            </if>
            <if test="url!=null">
                url,
            </if>
            <if test="createTime!=null">
                create_time,
            </if>
            <if test="updateTime!=null">
                update_time,
            </if>
            <if test="singer != null">
                singer_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name!= null">
                #{name},
            </if>
            <if test="introduction!=null">
                #{introduction},
            </if>
            <if test="pic!=null">
                #{pic},
            </if>
            <if test="lyric!=null">
                #{lyric},
            </if>
            <if test="url!=null">
                #{url},
            </if>
            <if test="createTime!=null">
                #{createTime},
            </if>
            <if test="updateTime!=null">
                #{updateTime},
            </if>
            <if test="singer!=null">
                #{singer.id}
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeyWithBLOBs" parameterType="Song">
        update song
        set singer_id = #{singer.id},
        name = #{name},
        introduction = #{introduction},
        update_time = #{updateTime},
        pic = #{pic},
        url = #{url},
        lyric = #{lyric}
        where id = #{id}
    </update>

    <update id="updateByPrimaryKey" parameterType="Song">
        update song
        set singer_id = #{singer.id},
        name = #{name},
        introduction = #{introduction},
        update_time = #{updateTime},
        pic = #{pic}
        where id = #{id}
    </update>

    <update id="updateSongUrl" parameterType="Song">
        update song set url=#{url} where id = #{id}
    </update>

    <update id="updateSongPic" parameterType="Song">
        update song set pic=#{pic} where id = #{id}
    </update>

    <delete id="deleteSong" parameterType="java.lang.Integer">
        delete from song where id = #{id}
    </delete>

    <resultMap id="BaseResultMap" type="Song">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="introduction" property="introduction" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="pic" property="pic" jdbcType="VARCHAR"/>
        <result column="url" property="url" jdbcType="VARCHAR"/>
        <association property="singer" javaType="Singer">
            <id property="id" column="singer_id"/>
        </association>
    </resultMap>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select id, name, introduction, create_time, update_time, pic, url, singer_id
        from song where id = #{id}
    </select>

    <select id="allSong" resultMap="BaseResultMap">
        select id, name, introduction, create_time, update_time, pic, url, singer_id
        from song
    </select>

    <select id="songOfSingerId" resultMap="BaseResultMap">
        select id, name, introduction, create_time, update_time, pic, url, singer_id
        from song where singer_id = #{singerId}
    </select>

    <select id="songOfSingerName" resultMap="BaseResultMap">
        select so.id, so.name, so.introduction, so.create_time, so.update_time, so.pic, so.url, so.singer_id
        from song as so
        join singer as si
        on so.singer_id = si.id
        where si.name = #{singerName}
    </select>

    <select id="songOfName" resultMap="BaseResultMap">
        select id, name, introduction, create_time, update_time, pic, url, singer_id
        from song where name = #{name}
    </select>
</mapper>